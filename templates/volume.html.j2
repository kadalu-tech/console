{% extends "layouts/default.html.j2" %}

{% block page_title %}Volume detail{% endblock %}
{% block body %}
    <div x-data="data" x-init="getVolume">
        <nav class="breadcrumb" aria-label="breadcrumbs">
            <ul>
                <li><a href="/">{% include "partials/icon_home.svg" %}</a></li>
                <li><a :href="'/pools?mgr=' + mgr_url">Pools</a></li>
                <li><a :href="`/volumes?mgr=${mgr_url}&pool=${pool_name}`" x-text="pool_name"></a></li>
                <li><a :href="`/volumes?mgr=${mgr_url}&pool=${pool_name}`">Volumes</a></li>
                <li class="is-active"><a href="#" aria-current="page" x-text="volume_name"></a></li>
            </ul>
        </nav>
        <nav class="level has-background-primary-light py-4">
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Nodes</p>
                    <p class="title is-size-5" x-text="volumeNodesCount(volume)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Storage Units</p>
                    <p class="title is-size-5" x-text="volumeStorageUnitsCount(volume)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Utilization</p>
                    <p class="title is-size-5" x-text="humanize(volume.metrics.size_used_bytes, true) + '/' + humanize(volume.metrics.size_bytes, true)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Inodes</p>
                    <p class="title is-size-5" x-text="humanize(volume.metrics.inodes_used_count) + '/' + humanize(volume.metrics.inodes_count)"></p>
                </div>
            </div>
        </nav>

        <table class="table is-fullwidth mt-6">
            <tr>
                <th>Node</th>
                <th>Path</th>
                <th>State</th>
                <th>Size</th>
                <th>Inodes</th>
            </tr>
            <template x-for="dist_group in volume.distribute_groups">
                <template x-for="storage_unit in dist_group.storage_units">
                    <tr>
                        <td x-text="storage_unit.node.name + ':' + storage_unit.port"></td>
                        <td x-text="storage_unit.path"></td>
                        <td x-html="storageUnitStateHtml(storage_unit)"></td>
                        <td style="position: relative">
                            <div x-text="humanize(storage_unit.metrics.size_used_bytes, true) + '/' + humanize(storage_unit.metrics.size_bytes, true)"></div>
                            <div class="is-size-7 has-text-grey" x-text="`${sizePercentage(storage_unit)}%`"></div>
                            <div class="number-bar">
                                <div :style="{width: `${sizePercentage(storage_unit)}%`, 'background-color': numberBarColor(sizePercentage(storage_unit))}" class="number-bar-inner"></div>
                            </div>
                        </td>
                        <td style="position: relative">
                            <div x-text="humanize(storage_unit.metrics.inodes_used_count) + '/' + humanize(storage_unit.metrics.inodes_count)"></div>
                            <div class="is-size-7 has-text-grey" x-text="`${inodesPercentage(storage_unit)}%`"></div>
                            <div class="number-bar">
                                <div :style="{width: `${inodesPercentage(storage_unit)}%`, 'background-color': numberBarColor(inodesPercentage(storage_unit))}" class="number-bar-inner"></div>
                            </div>
                        </td>
                    </tr>
                </template>
            </template>
        </table>
    </div>
    <script>
     var qparams = new URLSearchParams(window.location.search);
     handleRedirectToLogin(qparams.get("mgr"));

     document.addEventListener('alpine:init', () => {
         Alpine.data('data', () => ({
             link_name: "volume",
             mgr_url: qparams.get("mgr"),
             pool_name: qparams.get("pool"),
             volume_name: qparams.get("volume"),
             volume: {distribute_groups: [], metrics: {}},
             getVolume() {
                 var auth = getCookieValue(getMgrCookieName(this.mgr_url, "-token"));
                 var user_id = getCookieValue(getMgrCookieName(this.mgr_url, "-userid"));
                 fetch(`${this.mgr_url}/api/v1/pools/${this.pool_name}/volumes/${this.volume_name}?state=1`,
                       {
                           headers: {
                               "Authorization": `Bearer ${auth}`,
                               "X-User-ID": user_id
                           }
                       }
                 )
                     .then((response) => {
                         if (response.status == 401 || response.status == 403) {
                             resetCookiesAndRedirectToLogin(qparams.get("mgr"));
                         }
                         
                         return response.json();
                     })
                     .then((json) => this.volume = json);
             }
         }))
     })
    </script>
{% endblock %}
