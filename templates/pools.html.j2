{% extends "layouts/default.html.j2" %}

{% block page_title %}Pools List{% endblock %}
{% block body %}
    <div x-data="data" class="p-4">
        <nav class="breadcrumb mb-6" aria-label="breadcrumbs">
            <ul>
                <li><a href="/instances">{% include "partials/icon_home.svg" %}</a></li>
                <li class="is-active"><a href="#" aria-current="page">Pools</a></li>
            </ul>
        </nav>

        <div x-show="pools.length == 0 && showWelcome" class="columns">
            <section class="hero column is-8-desktop is-offset-2-desktop">
                <div class="hero-body has-text-centered">
                    <p class="title">
                        No Storage pools yet!
                    </p>
                    <p class="subtitle">
                        Start creating Pools as you wish. Dev, Prod, Staging...
                    </p>
                    <button class="button is-primary my-3" @click="showWelcome = false; showCreatePool = true">Create</button>
                    <p class="help"></p>
                    <img src="/static/undraw_inspiration_re_ivlv.svg" class="mt-6"/>
                </div>
            </section>
        </div>

        <div class="modal" :class="showCreatePool ? 'is-active' : ''">
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="modal-card-title">Create a Storage Pool</p>
                    <button class="delete" @click="resetForm()" aria-label="close"></button>
                </header>
                <section class="modal-card-body">
                    <article class="message is-danger" x-show="error != ''">
                        <div class="message-body" x-text="error"></div>
                    </article>
                    <div class="field">
                        <label class="label">Name</label>
                        <div class="control">
                            <input class="input" x-model="poolName" type="text" placeholder="Dev">
                        </div>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-link" @click="createPool()">Create</button>
                    <button class="button is-link is-light" @click="showCreatePool = false; poolName = '';showWelcome=true">Cancel</button>
                </footer>
            </div>
        </div>

        <h1 class="is-size-5 mb-4 px-2" x-show="pools.length > 0">
            List of Pools
            <button class="button is-primary is-small is-clickable ml-2"
                    title="Create a Pool"
                    @click="showCreatePool = true"
                    x-show="showCreateButton">
                <span class="icon is-small">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                    </svg>
                </span>
                <span>Create</span>
            </button>
        </h1>

        <div class="columns is-multiline">
            <template x-for="(pool, idx) in pools">
                <div class="column is-4-tablet is-3-widescreen">
                    <div class="card is-clickable">
                        <div class="has-text-right" x-data="{dropdownShowing: false}">
                            <div class="dropdown is-right" :class="dropdownShowing ? 'is-active' : ''">
                                <div class="dropdown-trigger is-clickable" x-html="dropdownTrigger()"></div>
                                <div class="dropdown-menu has-text-left" role="menu">
                                    <div class="dropdown-content">
                                        <a class="dropdown-item" @click="deletePool(idx)" x-html="`<span class='has-text-danger'>${SVG_DELETE}</span> Delete`">
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-content" @click="location.href=poolUrl(pool)">
                            <div class="media">
                                <div class="media-left">
                                    <figure class="image is-48x48" x-html="uuidThumbmail(pool.id)">
                                    </figure>
                                </div>
                                <div class="media-content">
                                    <p class="title is-4" x-text="pool.name"></p>
                                    <p class="subtitle is-7" x-text="pool.id"></p>
                                </div>
                            </div>
                        </div>               
                    </div>
                </div>
            </template>
        </div>
    </div>
    <script>
     var qparams = new URLSearchParams(window.location.search);
     handleRedirectToLogin(qparams.get("mgr"));

     document.addEventListener('alpine:init', () => {
         Alpine.data('data', () => ({
             error: "",
             linkName: "pools",
             mgrUrl: qparams.get("mgr"),
             pools: [],
             showWelcome: false,
             showCreateButton: true,
             showCreatePool: false,
             poolName: "",
             poolUrl(pool) {
                 return '/volumes?mgr=' + this.mgrUrl + '&pool=' + pool.name;
             },
             async init() {
                 const mgr = storageManagerFromCookies(this.mgrUrl);
                 try {
                     this.pools = await mgr.listPools();
                     if (this.pools.length == 0) {
                         this.showWelcome = true;
                     }
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error)
                     this.error = error;
                 }
             },
             async createPool() {
                 if (this.poolName.trim() == "") {
                     this.error = "Pool name is empty";
                     return
                 }

                 const mgr = storageManagerFromCookies(this.mgrUrl);
                 try {
                     await mgr.createPool(this.poolName);
                     this.pools = await mgr.listPools();
                     this.poolName = "";
                     this.error = "";
                     this.showCreatePool = false;
                     this.message = "Pool added successfully!";
                     this.showCreateButton = true;
                     setTimeout(function() {
                         this.message = "";
                     }, 5000);
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error)
                     this.error = error;
                 }
             },
             async deletePool(idx) {
                 var pool = this.pools[idx];
                 if (!confirm(`Are you sure want to delete the Pool "${pool.name}"?`)) {
                     return;
                 }
                 const mgr = storageManagerFromCookies(this.mgrUrl);
                 try {
                     await mgr.pool(pool.name).delete();
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error);
                 }

                 this.pools = this.pools.filter(function(value, index, arr){
                     return value.name != pool.name;
                 });
             }
         }))
     })
    </script>
{% endblock %}
