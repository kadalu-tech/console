{% extends "layouts/default.html.j2" %}

{% block page_title %}Volumes List{% endblock %}
{% block body %}
    <div x-data="data" class="p-4">
        {% with %}
            {% set menus=[{"name": "Pools", "href": "'/pools?mgr=' + mgrUrl"}, {"name": "", "x_text": "poolName", "href": "`/volumes?mgr=${mgrUrl}&pool=${poolName}`"}, {"name": "Volumes"}] %}
            {% include "partials/breadcrumb.html.j2" %}
        {% endwith %}

        <div x-show="volumes.length == 0 && showWelcome" class="columns">
            <section class="hero column is-8-desktop is-offset-2-desktop">
                <div class="hero-body has-text-centered">
                    <p class="title">
                        Storage Pool without Volumes!
                    </p>
                    <p class="subtitle">
                        Start creating Volumes.
                    </p>
                    <button class="button is-primary my-3" @click="showWelcome = false; showCreateVolume = true">Create</button>
                    <p class="help"></p>
                    <img src="/static/undraw_ideas_re_7twj.svg" class="mt-6"/>
                </div>
            </section>
        </div>

        <div class="modal" :class="showCreateVolume ? 'is-active' : ''">
            {% include "partials/volume_create.html" %}
        </div>

        <nav class="level has-background-primary-light py-4" x-show="volumes.length > 0">
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Volumes</p>
                    <p class="title is-size-5" x-text="pool.volumes_count"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <a :href="nodesUrl(mgrUrl, pool)">
                        <p class="heading">Nodes</p>
                        <p class="title is-size-5" x-text="pool.nodes_count"></p>
                    </a>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Storage Units</p>
                    <p class="title is-size-5" x-text="poolStorageUnitsCount(volumes)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Utilization</p>
                    <div class="title is-size-5" style="position: relative">
                        <div class="px-2" x-text="poolUtilization(volumes)"></div>
                        <div class="px-2 is-size-7 has-text-grey" x-text="`${poolSizePercentage(volumes)}%`"></div>
                        <div class="number-bar-in-header">
                            <div :style="{width: `${poolSizePercentage(volumes)}%`, 'background-color': numberBarColor(poolSizePercentage(volumes))}" class="number-bar-inner"></div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <h1 class="is-size-5 mb-4 px-2"  x-show="volumes.length > 0">
            List of Volumes
            <button class="button is-primary is-small is-clickable ml-2"
                    title="Create a Volume"
                    @click="showCreateVolume = true"
                    x-show="showCreateButton">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="icon is-small">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                </svg>
                <span>Create</span>
            </button>
        </h1>
        <div class="columns is-multiline">
            <template x-for="(volume, idx) in volumes">
                <div class="column is-4-tablet is-3-widescreen">
                    <div class="card is-3">
                        <article class="message is-danger" x-show="cardErrors[idx] != '' && cardErrors[idx] != undefined">
                            <div class="message-body">
                                <p class="has-text-right"><button class="delete" aria-label="delete" @click="cardErrors[idx] = ''"></button></p>
                                <p x-html="cardErrors[idx]"></p>
                            </div>
                        </article>
                        <div class="has-text-right" x-data="{dropdownShowing: false}">
                            <div class="dropdown is-right" :class="dropdownShowing ? 'is-active' : ''">
                                <div class="dropdown-trigger is-clickable" x-html="dropdownTrigger()"></div>
                                <div class="dropdown-menu has-text-left" role="menu">
                                    <div class="dropdown-content">
                                        <a class="dropdown-item" @click="startVolume(idx)" x-html="volumeStartButton(volume, idx)"></a>
                                        <a class="dropdown-item" @click="stopVolume(idx)">
                                            <span x-html="volumeStopButton(volume, idx)"></span>
                                        </a>
                                        <a class="dropdown-item" @click="deleteVolume(idx)">
                                            <span x-html="volumeDeleteButton(volume, idx)"></span>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-content is-clickable" @click="location.href=volumeUrl(volume)">
                            <div class="media">
                                <div class="media-left">
                                    <figure class="image is-32x32" x-html="uuidThumbmail(volume.id)">
                                    </figure>
                                </div>
                                <div class="media-content">
                                    <p class="title is-5" x-html="volumeNameAndStatus(volume)"></p>
                                    <p class="subtitle">
                                        <div class="is-size-7" x-text="volume.id"></div>
                                        <div class="is-size-7" x-text="volumeType(volume)"></div>
                                    </p>
                                </div>
                            </div>
                            <div class="content">
                                <div style="position: relative">
                                    <div class="px-2" x-text="humanize(volume.metrics.size_used_bytes, true) + '/' + humanize(volume.metrics.size_bytes, true)"></div>
                                    <div class="px-2 is-size-7 has-text-grey" x-text="`${sizePercentage(volume)}%`"></div>
                                    <div class="number-bar">
                                        <div :style="{width: `${sizePercentage(volume)}%`, 'background-color': numberBarColor(sizePercentage(volume))}" class="number-bar-inner"></div>
                                    </div>
                                </div>
                                <p class="subtitle is-6">Utilization</p>

                                <div style="position: relative">
                                    <div class="px-2" x-text="humanize(volume.metrics.inodes_used_count) + '/' + humanize(volume.metrics.inodes_count)"></div>
                                    <div class="px-2 is-size-7 has-text-grey" x-text="`${inodesPercentage(volume)}%`"></div>
                                    <div class="number-bar">
                                        <div :style="{width: `${inodesPercentage(volume)}%`, 'background-color': numberBarColor(inodesPercentage(volume))}" class="number-bar-inner"></div>
                                    </div>
                                </div>
                                <p class="subtitle is-6">Inodes</p>
                            </div>
                        </div>
                    </div>
                </div>
            </template>
        </div>
    </div>
    <script>
     var qparams = new URLSearchParams(window.location.search);
     handleRedirectToLogin(qparams.get("mgr"));

     document.addEventListener('alpine:init', () => {
         Alpine.data('data', () => ({
             linkName: "volumes",
             mgrUrl: qparams.get("mgr"),
             poolName: qparams.get("pool"),
             volumes: [],
             showCreateButton: true,
             showCreateVolume: false,
             showWelcome: false,
             error: "",
             pool: {},
             cardErrors: {},
             mgr: null,
             volumeUrl(volume) {
                 return `/volume?mgr=${this.mgrUrl}&pool=${this.poolName}&volume=${volume.name}`;
             },
             async startVolume(idx) {
                 var volume = this.volumes[idx];
                 try {
                     await this.mgr.pool(this.poolName).volume(volume.name).start();
                     this.volumes[idx] = await (this.mgr.pool(this.poolName).volume(volume.name)).get(true);
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error);
                     this.cardErrors[idx] = `Failed to start the volume.<br/>${error}`
                     var obj = this
                     setTimeout(function() {
                         obj.cardErrors[idx] = "";
                     }, 7000);
                 }
             },
             async stopVolume(idx) {
                 var volume = this.volumes[idx];
                 if (!confirm(`Are you sure want to stop the Volume "${volume.name}"?`)) {
                     return;
                 }

                 try {
                     await this.mgr.pool(this.poolName).volume(volume.name).stop();
                     this.volumes[idx] = await this.mgr.pool(this.poolName).volume(volume.name).get(true);
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error);
                     this.cardErrors[idx] = `Failed to stop the volume.<br/>${error}`
                     var obj = this
                     setTimeout(function() {
                         obj.cardErrors[idx] = "";
                     }, 7000);
                 }
             },
             async deleteVolume(idx) {
                 var volume = this.volumes[idx];
                 if (!confirm(`Are you sure want to delete the Volume "${volume.name}"?`)) {
                     return;
                 }

                 try {
                     await this.mgr.pool(this.poolName).volume(volume.name).delete();
                     this.volumes = this.volumes.filter(function(value, index, arr){
                         return value.name != volume.name;
                     });

                     if (this.volumes.length == 0){
                        this.showWelcome = true;
                     }
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error);
                     this.cardErrors[idx] = `Failed to delete the volume.<br/>${error}`
                     var obj = this
                     setTimeout(function() {
                         obj.cardErrors[idx] = "";
                     }, 7000);
                 }
             },
             async init() {
                 this.mgr = storageManagerFromCookies(this.mgrUrl);
                 try {
                     this.volumes = await this.mgr.pool(this.poolName).listVolumes(true);
                     if (this.volumes.length === 0) {
                         this.showWelcome = true;
                     }
                     this.pool = await this.mgr.pool(this.poolName).get();
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error);
                     this.error = error;
                 }
             }
         }))
     })
    </script>
{% endblock %}
