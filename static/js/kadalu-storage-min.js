(()=>{var r=class extends Error{constructor(t){super(t),this.name=this.constructor.name}};var u=class{constructor(t,s,e){this.mgr=t,this.pool_name=s,this.name=e}static async list(t,s,e=!1){return await t.httpGet(`/api/v1/pools/${s}/volumes?state=${e?1:0}`)}async get(t=!1){return await this.mgr.httpGet(`/api/v1/pools/${this.pool_name}/volumes/${this.name}?state=${t?1:0}`)}async start(){return await this.mgr.httpPost(`/api/v1/pools/${this.pool_name}/volumes/${this.name}/start`,{})}async stop(){return await this.mgr.httpPost(`/api/v1/pools/${this.pool_name}/volumes/${this.name}/stop`,{})}async delete(){return this.mgr.httpDelete(`/api/v1/pools/${this.pool_name}/volumes/${this.name}`)}};var n=class{constructor(t,s,e){this.mgr=t,this.pool_name=s,this.name=e}static async add(t,s,e,a=""){return await t.httpPost(`/api/v1/pools/${s}/nodes`,{name:e,endpoint:a})}static async list(t,s,e=!1){return await t.httpGet(`/api/v1/pools/${s}/nodes?state=${e?1:0}`)}async get(t=!1){return await this.mgr.httpGet(`/api/v1/pools/${this.pool_name}/nodes/${this.name}?state=${t?1:0}`)}async remove(){return this.mgr.httpDelete(`/api/v1/pools/${this.pool_name}/nodes/${this.name}`)}};var h=class{constructor(t,s){this.mgr=t,this.name=s}static async create(t,s){return await t.httpPost("/api/v1/pools",{name:s})}static async list(t){return await t.httpGet("/api/v1/pools")}async listVolumes(t=!1){return await u.list(this.mgr,this.name,t)}async get(){return await this.mgr.httpGet(`/api/v1/pools/${this.name}`)}async delete(){return await this.mgr.httpDelete(`/api/v1/pools/${this.name}`)}volume(t){return new u(this.mgr,this.name,t)}node(t){return new n(this.mgr,this.name,t)}async addNode(t,s=""){return await n.add(this.mgr,this.name,t,s)}async listNodes(t=!1){return await n.list(this.mgr,this.name,t)}async rename(t){return this.mgr.httpPost(`/api/v1/pools/${this.name}/rename`,{new_pool_name:t})}};var p=class{constructor(t,s){this.mgr=t,this.username=s}static async create(t,s,e,a=""){return await t.httpPost("/api/v1/users",{name:a,username:s,password:e})}static async hasUsers(t){return await t.httpGet("/api/v1/user-exists",!0)}};var o=class{constructor(t){this.url=t,this.user_id="",this.api_key_id="",this.token=""}async httpPost(t,s){let e=await fetch(`${this.url}${t}`,{method:"POST",headers:{...this.authHeaders(),"Content-Type":"application/json"},body:JSON.stringify(s)});if(e.status==401||e.status==403)throw new r((await e.json()).error);let a=await e.json();if(a.error)throw new Error(a.error);return a}async httpGet(t,s=!1){let e=await fetch(`${this.url}${t}`,{headers:{...this.authHeaders(),"Content-Type":"application/json"}});if(e.status==401||e.status==403)throw new r((await e.json()).error);if(s)return e.status==200;let a=await e.json();if(a.error)throw new Error(a.error);return a}async httpDelete(t){let s=await fetch(`${this.url}${t}`,{method:"DELETE",headers:{...this.authHeaders(),"Content-Type":"application/json"}});if(s.status==401||s.status==403)throw new r((await s.json()).error);if(s.status!==204){let e=await s.json();if(e.error)throw new Error(e.error)}}static fromToken(t,s,e,a){let i=new o(t);return i.user_id=s,i.api_key_id=e,i.token=a,i}authHeaders(){return this.token!=""?{Authorization:`Bearer ${this.token}`,"X-User-ID":this.user_id}:{}}async generateApiKey(t,s){return await this.httpPost(`/api/v1/users/${t}/api-keys`,{password:s})}static async login(t,s,e){let a=new o(t),i=await a.generateApiKey(s,e);return a.user_id=i.user_id,a.api_key_id=i.id,a.token=i.token,a}async logout(){this.api_key_id!=""&&(await this.httpDelete(`/api/v1/api-keys/${this.api_key_id}`),this.api_key_id="",this.user_id="",this.token="")}async listPools(){return await h.list(this)}pool(t){return new h(this,t)}async createPool(t){return await h.create(this,t)}async createUser(t,s,e=""){return await p.create(this,t,s,e)}async hasUsers(){return await p.hasUsers()}user(t){return new p(this,t)}};window.StorageManager=o;window.StorageManagerAuthError=r;})();
