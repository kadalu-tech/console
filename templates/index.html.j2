{% extends "layouts/default.html.j2" %}

{% block page_title %}List of Storage Manager instances{% endblock %}
{% block body %}
    <div x-data="data" x-init="getStorageManagers">
        <nav class="breadcrumb mb-6" aria-label="breadcrumbs">
            <ul>
                <li><a href="/">{% include "partials/icon_home.svg" %}</a></li>
                <li class="is-active"><a href="#" aria-current="page">Instances</a></li>
            </ul>
        </nav>
        <article class="message is-success" x-show="message != ''">
            <div class="message-body" x-text="message"></div>
        </article>
        <div x-show="storage_managers.length == 0 || show_add_storage_manager" class="mr-5 mb-6">
            <article class="message is-info">
                <div class="message-body">
                    <h3 class="has-text-weight-semibold">Add a new Storage Manager instance.</h3>
                    All instances details are saved in local storage of your browser. The Manager URL added here are not available in other browser instances. API calls to get Storage Pools and Volumes information are initiated from the browser and no information is shared with us.
                </div>
            </article>

            <article class="message is-danger" x-show="error != ''">
                <div class="message-body" x-text="error"></div>
            </article>
            <form @submit.prevent="addInstance">
                <div class="field">
                    <label class="label">Name</label>
                    <div class="control">
                        <input class="input" x-model="sm_name" type="text" placeholder="Dev">
                    </div>
                </div>

                <div class="field">
                    <label class="label">URL</label>
                    <div class="control">
                        <input class="input" x-model="sm_url" type="text" placeholder="http://localhost:3000">
                    </div>
                </div>

                <div class="field is-grouped">
                    <div class="control">
                        <input type="submit" class="button is-link" value="Add"/>
                    </div>
                    <div class="control">
                        <button class="button is-link is-light" @click="show_add_storage_manager = false">Cancel</button>
                    </div>
                </div>
            </form>
        </div>
        <h1 class="is-size-5 mb-4 px-2" x-show="storage_managers.length > 0">
            List of instances
            <button class="button is-primary is-clickable ml-2 is-small"
                    title="Add a new Storage Manager instance"
                    @click="show_add_storage_manager = true"
                    x-show="!show_add_storage_manager">
                <span class="icon is-small">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                    </svg>
                </span>
                <span>Add</span>
            </button>
        </h1>
        <div class="columns">
            <template x-for="sm in storage_managers">
                <div class="column is-3">
                    <div class="card is-clickable m-2" @click="location.href=poolUrl(pool)">
                        <div class="has-text-right" x-data="{dropdown_showing: false}">
                            <div class="dropdown is-right" :class="dropdown_showing ? 'is-active' : ''">
                                <div class="dropdown-trigger is-clickable" x-html="dropdownTrigger()"></div>
                                <div class="dropdown-menu has-text-left" role="menu">
                                    <div class="dropdown-content">
                                        <a class="dropdown-item" @click="deleteInstance(sm.name)" x-html="`<span class='has-text-danger'>${SVG_DELETE}</span> Delete`">
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card-content">
                            <div class="media">
                                <div class="media-left">
                                    <svg xmlns="http://www.w3.org/2000/svg" x-show="sm.reachable" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 icon has-text-success">
                                        <path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm.53 5.47a.75.75 0 00-1.06 0l-3 3a.75.75 0 101.06 1.06l1.72-1.72v5.69a.75.75 0 001.5 0v-5.69l1.72 1.72a.75.75 0 101.06-1.06l-3-3z" clip-rule="evenodd" />
                                    </svg>
                                    <svg xmlns="http://www.w3.org/2000/svg" x-show="!sm.reachable" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 icon has-text-danger">
                                        <path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zm-.53 14.03a.75.75 0 001.06 0l3-3a.75.75 0 10-1.06-1.06l-1.72 1.72V8.25a.75.75 0 00-1.5 0v5.69l-1.72-1.72a.75.75 0 00-1.06 1.06l3 3z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="media-content">
                                    <p class="title is-4" x-text="sm.name" @click="location.href=storageManagerUrl(sm)"></p>
                                    <p class="subtitle is-6" x-text="sm.url" @click="location.href=storageManagerUrl(sm)"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </template>
        </div>

    </div>
    <script>
     var qparams = new URLSearchParams(window.location.search);

     document.addEventListener('alpine:init', () => {
         Alpine.data('data', () => ({
             link_name: "storage_managers",
             show_add_storage_manager: false,
             show_add_button: true,
             sm_name: "",
             sm_url: "",
             error: "",
             message: "",
             storage_managers: [],
             storageManagerUrl(sm) {
                 return '/pools?mgr=' + sm.url;
             },
             storageManagerStatus(idx) {
                 fetch(this.storage_managers[idx].url + '/ping')
                     .then((response) => {
                         if (response.status === 200) {
                             this.storage_managers[idx].reachable = true;
                         } else {
                             this.storage_managers[idx].reachable = false;
                         }
                     });
             },
             getStorageManagers() {
                 var instances = window.localStorage.getItem("storage_managers");
                 if (!instances) {
                     this.storage_managers = [];
                     this.show_add_button = false;
                     return;
                 }

                 this.storage_managers = JSON.parse(instances);
                 for (var i=0; i<this.storage_managers.length; i++) {
                     this.storageManagerStatus(i);
                 }
                 if (this.storage_managers.length === 0) {
                     this.show_add_button = false;
                 }
             },
             addInstance() {
                 var obj = this;
                 if (obj.sm_name == "") {
                     obj.error = "Invalid instance name";
                     return
                 }
                 if (obj.sm_url == "") {
                     obj.error = "Invalid instance URL";
                     return
                 }
                 try {
                     var url = new URL(obj.sm_url);
                     obj.sm_url = url.protocol + "//" + url.host;
                 } catch (error) {
                     obj.error = "Invalid instance URL";
                     return;
                 }

                 for (var i=0; i<obj.storage_managers.length; i++) {
                     if (obj.storage_managers[i].name.toLowerCase() === obj.sm_name.toLowerCase()) {
                         obj.error = "Storage Manager Name already exists"
                         return
                     }
                     if (obj.storage_managers[i].url.toLowerCase() === obj.sm_url.toLowerCase()) {
                         obj.error = "Storage Manager URL already exists"
                         return
                     }
                 }
                 obj.error = "";
                 var instances = window.localStorage.getItem("storage_managers");
                 if (!instances) instances = "[]";
                 var data = JSON.parse(instances);
                 data.unshift({
                     name: obj.sm_name,
                     url: obj.sm_url
                 });
                 window.localStorage.setItem("storage_managers", JSON.stringify(data));
                 obj.storage_managers = data;
                 obj.storageManagerStatus(0);
                 obj.sm_name = "";
                 obj.sm_url = "";
                 obj.show_add_storage_manager = false;
                 obj.message = "Storage Manager added successfully!";
                 obj.show_add_button = true;
                 setTimeout(function() {
                     obj.message = "";
                 }, 5000);
             },
             deleteInstance(sm_name) {
                 if (!confirm(`Are you sure want to delete ${sm_name}?`)) {
                     return;
                 }
                 var instances = window.localStorage.getItem("storage_managers");
                 if (!instances) return;

                 this.storage_managers = JSON.parse(instances).filter(function(value, index, arr){
                     return value.name != sm_name;
                 });
                 window.localStorage.setItem("storage_managers", JSON.stringify(this.storage_managers));
                 if (this.storage_managers.length === 0) {
                     this.show_add_button = false;
                 }
             }
         }))
     })
    </script>
{% endblock %}
