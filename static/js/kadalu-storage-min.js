(()=>{var n=class{constructor(t,r,s){this.mgr=t,this.pool_name=r,this.name=s}static async list(t,r,s){return s=s===void 0?!1:s,await(await fetch(`${t.url}/api/v1/pools/${r}/volumes?state=${s?1:0}`,{headers:{...t.authHeaders()}})).json()}async get(t){return t=t===void 0?!1:t,await(await fetch(`${this.mgr.url}/api/v1/pools/${this.pool_name}/volumes/${this.name}?state=${t?1:0}`,{headers:{...this.mgr.authHeaders()}})).json()}async startOrStop(t){return await(await fetch(`${this.mgr.url}/api/v1/pools/${this.pool_name}/volumes/${this.name}/${t}`,{method:"POST",headers:{...this.mgr.authHeaders()}})).json()}async start(){return await this.startOrStop("start")}async stop(){return await this.startOrStop("stop")}async delete(){let t=await fetch(`${this.mgr.url}/api/v1/pools/${this.pool_name}/volumes/${this.name}`,{method:"DELETE",headers:{...this.mgr.authHeaders()}});if(t.status!=204)throw new Error((await t.json()).error)}};var i=class{constructor(t,r){this.mgr=t,this.name=r}static async create(t,r){let e=await(await fetch(`${t.url}/api/v1/pools`,{method:"POST",headers:{...t.authHeaders(),"Content-Type":"application/json"},body:JSON.stringify({name:r})})).json();if(e.error)throw new Error(e.error);return e}static async list(t){return await(await fetch(t.url+"/api/v1/pools",{headers:{...t.authHeaders()}})).json()}async listVolumes(t){return await n.list(this.mgr,this.name,t)}async delete(){let t=await fetch(`${this.mgr.url}/api/v1/pools/${this.name}`,{method:"DELETE",headers:{...this.mgr.authHeaders()}});if(t.status!=204)throw new Error((await t.json()).error)}volume(t){return new n(this.mgr,this.name,t)}};var o=class{constructor(t){this.url=t,this.user_id="",this.api_key_id="",this.token=""}static fromToken(t,r,s,e){let a=new o(t);return a.user_id=r,a.api_key_id=s,a.token=e,a}authHeaders(){return this.token!=""?{Authorization:`Bearer ${this.token}`,"X-User-ID":this.user_id}:{}}async generateApiKey(t,r){var s=await fetch(`${this.url}/api/v1/users/${t}/api-keys`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({password:r})});let e=await s.json();if(e.error)throw new Error(e.error);return e}static async login(t,r,s){let e=new o(t),a=await e.generateApiKey(r,s);return e.user_id=a.user_id,e.api_key_id=a.id,e.token=a.token,e}async logout(){if(this.api_key_id=="")return;let t=await fetch(`${this.url}/api/v1/api-keys/${this.api_key_id}`,{method:"DELETE",headers:{...this.authHeaders()}});if(t.status!=204)throw new Error((await t.json()).error);this.api_key_id="",this.user_id="",this.token=""}async listPools(){return await i.list(this)}pool(t){return new i(this,t)}async createPool(t){return await i.create(this,t)}};window.StorageManager=o;})();
