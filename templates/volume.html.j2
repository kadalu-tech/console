{% extends "layouts/default.html.j2" %}

{% block page_title %}Volume detail{% endblock %}
{% block body %}
    <div x-data="data" x-init="getVolume" class="p-4">
        {% with %}
            {% set menus=[{"name": "Pools", "href": "'/pools?mgr=' + mgrUrl"}, {"name": "", "x_text": "poolName", "href": "`/volumes?mgr=${mgrUrl}&pool=${poolName}`"}, {"name": "Volumes", "href": "`/volumes?mgr=${mgrUrl}&pool=${poolName}`"}, {"name": "", "x_text": "volumeName"}] %}
            {% include "partials/breadcrumb.html.j2" %}
        {% endwith %}

        <nav class="level has-background-primary-light py-4">
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Nodes</p>
                    <p class="title is-size-5" x-text="volumeNodesCount(volume)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Storage Units</p>
                    <p class="title is-size-5" x-text="volumeStorageUnitsCount(volume)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Utilization</p>
                    <p class="title is-size-5" x-text="humanize(volume.metrics.size_used_bytes, true) + '/' + humanize(volume.metrics.size_bytes, true)"></p>
                </div>
            </div>
            <div class="level-item has-text-centered">
                <div>
                    <p class="heading">Inodes</p>
                    <p class="title is-size-5" x-text="humanize(volume.metrics.inodes_used_count) + '/' + humanize(volume.metrics.inodes_count)"></p>
                </div>
            </div>
        </nav>

        <table class="table is-fullwidth mt-6">
            <tr>
                <th>Node</th>
                <th>Path</th>
                <th>State</th>
                <th>Size</th>
                <th>Inodes</th>
            </tr>
            <template x-for="distGroup in volume.distribute_groups">
                <template x-for="storageUnit in distGroup.storage_units">
                    <tr>
                        <td x-text="storageUnit.node.name + ':' + storageUnit.port"></td>
                        <td x-text="storageUnit.path"></td>
                        <td x-html="storageUnitStateHtml(storageUnit)"></td>
                        <td style="position: relative">
                            <div x-text="humanize(storageUnit.metrics.size_used_bytes, true) + '/' + humanize(storageUnit.metrics.size_bytes, true)"></div>
                            <div class="is-size-7 has-text-grey" x-text="`${sizePercentage(storageUnit)}%`"></div>
                            <div class="number-bar">
                                <div :style="{width: `${sizePercentage(storageUnit)}%`, 'background-color': numberBarColor(sizePercentage(storageUnit))}" class="number-bar-inner"></div>
                            </div>
                        </td>
                        <td style="position: relative">
                            <div x-text="humanize(storageUnit.metrics.inodes_used_count) + '/' + humanize(storageUnit.metrics.inodes_count)"></div>
                            <div class="is-size-7 has-text-grey" x-text="`${inodesPercentage(storageUnit)}%`"></div>
                            <div class="number-bar">
                                <div :style="{width: `${inodesPercentage(storageUnit)}%`, 'background-color': numberBarColor(inodesPercentage(storageUnit))}" class="number-bar-inner"></div>
                            </div>
                        </td>
                    </tr>
                </template>
            </template>
        </table>
    </div>
    <script>
     var qparams = new URLSearchParams(window.location.search);
     handleRedirectToLogin(qparams.get("mgr"));

     document.addEventListener('alpine:init', () => {
         Alpine.data('data', () => ({
             linkName: "volume",
             mgrUrl: qparams.get("mgr"),
             poolName: qparams.get("pool"),
             volumeName: qparams.get("volume"),
             volume: {distribute_groups: [], metrics: {}},
             async getVolume() {
                 const mgr = storageManagerFromCookies(this.mgrUrl);
                 try {
                     this.volume = await mgr.pool(this.poolName).volume(this.volumeName).get(true);
                 } catch (error) {
                     authErrorRedirectHandle(this.mgrUrl, error);
                     this.error = error;
                 }
             }
         }))
     })
    </script>
{% endblock %}
